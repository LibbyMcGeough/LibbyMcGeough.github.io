{"version":3,"sources":["javascript/Sidebar.js","javascript/Home.js","javascript/Login.js","javascript/Main.js","serviceWorker.js","index.js"],"names":["Sidebar","props","state","page","this","setState","onSelectPage","className","onClick","href","React","Component","Home","Login","loggedIn","getLoggedInPage","getLoginPage","Main","onSelect","getPage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iWAuCeA,G,8DAlCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACC,KAAM,QAFL,E,oDAKXA,GACDC,KAAKF,MAAMC,OAASA,IACnBC,KAAKC,SAAS,CAACF,KAAMA,IACrBC,KAAKH,MAAMK,aAAaH,M,+BAItB,IAAD,OACL,OAAO,yBAAKI,UAAU,WAClB,yBAAKA,UAAU,iBAAiBC,QAAS,kBAAM,EAAKA,QAAQ,UACxD,4BAAQD,UAAU,6BAGtB,yBAAKA,UAAU,kBACX,4BAAQA,UAAU,uBAAuBC,QAAS,kBAAM,EAAKA,QAAQ,aAGzE,uBAAGD,UAAU,iBAAiBE,KAAK,6BAC/B,4BAAQF,UAAU,6BAGtB,uBAAGA,UAAU,iBAAiBE,KAAK,wBAC/B,4BAAQF,UAAU,iC,GA7BZG,IAAMC,Y,MC2BbC,MA3Bf,WACI,OACI,yBAAKL,UAAU,QACX,yBAAKA,UAAU,SAAf,8BAGA,yBAAKA,UAAU,WACX,wFAGA,goBAGA,+DAGA,udAGA,ygBCkCDM,G,MArDf,kDAEI,WAAYZ,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CAACY,UAAU,GAFT,EAFvB,sDAQQV,KAAKC,SAAS,CAACS,UAAU,MARjC,qCAWoB,IAAD,OACX,OAAO,yBAAKP,UAAU,SAClB,yBAAKA,UAAU,SAAf,SAGA,yBAAKA,UAAU,iBACX,yBAAKA,UAAU,eACX,0DAIJ,2BAAOA,UAAU,UAEjB,4BAAQA,UAAU,SAASC,QAAW,kBAAM,EAAKA,YAAjD,cAxBhB,wCAgCQ,OAAO,yBAAKD,UAAU,SAClB,yBAAKA,UAAU,SAAf,YAGA,yBAAKA,UAAU,iBAAf,6/BApCZ,+BA6CQ,OAAGH,KAAKF,MAAMY,SACHV,KAAKW,kBAELX,KAAKY,mBAhDxB,GAA2BN,IAAMC,YCmClBM,EAhCf,4MAEIf,MAAQ,CAACC,KAAM,QAFnB,EAIIe,SAAW,SAACf,GACL,EAAKD,MAAMC,OAASA,GACnB,EAAKE,SAAS,CAACF,KAAMA,KANjC,wDAWQ,MAAuB,UAApBC,KAAKF,MAAMC,KACH,kBAAC,EAAD,MAEA,kBAAC,EAAD,QAdnB,+BAmBQ,OACI,yBAAKI,UAAU,QACX,yBAAKA,UAAU,qBACX,kBAAC,EAAD,CAASD,aAAcF,KAAKc,YAEhC,yBAAKX,UAAU,QACVH,KAAKe,gBAzB1B,GAA0BT,IAAMC,WCMZS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f51d6b34.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../css/Sidebar.css';\r\n\r\nclass Sidebar extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {page: \"home\"};\r\n    }\r\n\r\n    onClick(page) {\r\n        if(this.state.page !== page) {\r\n            this.setState({page: page});\r\n            this.props.onSelectPage(page);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return <div className=\"Sidebar\">\r\n            <div className=\"button-wrapper\" onClick={() => this.onClick(\"home\")}>\r\n                <button className=\"sidebar-button building\">\r\n                </button>\r\n            </div>\r\n            <div className=\"button-wrapper\">\r\n                <button className=\"sidebar-button agent\" onClick={() => this.onClick(\"login\")}>\r\n                </button>\r\n            </div>\r\n            <a className=\"button-wrapper\" href=\"https://www.facebook.com/\">\r\n                <button className=\"sidebar-button facebook\">\r\n                </button>\r\n            </a>\r\n            <a className=\"button-wrapper\" href=\"https://twitter.com/\">\r\n                <button className=\"sidebar-button twitter\">\r\n                </button>\r\n            </a>\r\n        </div>\r\n    }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from 'react';\r\nimport '../css/Home.css';\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"Home\">\r\n            <div className=\"Title\">\r\n                Jerusalem Detective Agency\r\n            </div>\r\n            <div className=\"content\">\r\n                <h1>\r\n                    Lorem ipsum dolor sit amet, consectetur adipiscing elit.\r\n                </h1>\r\n                <p>\r\n                    Vestibulum ullamcorper ultrices nunc condimentum interdum. Nulla varius nisi ante, sit amet pretium turpis feugiat eget. Nam volutpat, turpis id maximus pretium, sapien eros elementum nibh, ut tincidunt enim nisl id lorem. Praesent ut bibendum velit, et sodales nibh. Vestibulum tempor nunc lobortis enim dapibus, vel bibendum risus congue. Praesent vitae tortor eget nisi fringilla semper eu quis justo. Suspendisse et consequat magna. Sed finibus sapien sed ipsum fermentum, vitae tempus ipsum dictum. Ut sed dolor non neque dapibus aliquam in a ex. Duis leo nisi, vulputate a laoreet at, ultricies et diam.\r\n                </p>\r\n                <h1>\r\n                    Curabitur quis malesuada lorem.\r\n                </h1>\r\n                <p>\r\n                    Pellentesque fringilla maximus convallis. Aliquam dignissim velit vel elit condimentum iaculis. Etiam porta lectus ac leo consectetur, et lobortis lacus pretium. Pellentesque libero massa, faucibus sit amet porttitor quis, varius at nunc. Vestibulum ullamcorper consequat ligula at aliquet. Vestibulum mi elit, vestibulum et dictum eu, iaculis in nulla. Orci varius natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus.\r\n                </p>\r\n                <p>\r\n                    Curabitur a lacinia augue. Duis in dolor metus. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer porta sem et mauris accumsan, et luctus nisl volutpat. Quisque consequat urna sit amet dui pretium finibus. Maecenas egestas non enim et semper. Fusce pellentesque ultricies leo, et tristique ante aliquam et. Aliquam tincidunt semper augue, eget bibendum odio suscipit vel. Curabitur eu erat porta, fringilla turpis et, sodales ipsum. Donec posuere sapien id cursus aliquam.\r\n                </p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Home;","import React from 'react';\r\nimport '../css/Login.css';\r\n\r\nexport class Login extends React.Component  {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {loggedIn: false};\r\n    }\r\n\r\n    onClick() {\r\n        this.setState({loggedIn: true})\r\n    }\r\n\r\n    getLoginPage() {\r\n        return <div className=\"Login\">\r\n            <div className=\"Title\">\r\n                Login\r\n            </div>\r\n            <div className=\"login-content\">\r\n                <div className=\"input-label\">\r\n                    <h1>\r\n                        Please enter your AgentID\r\n                    </h1>\r\n                </div>\r\n                <input className=\"input\">\r\n                </input>\r\n                <button className=\"submit\" onClick = {() => this.onClick()}>\r\n                    Submit\r\n                </button>\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    getLoggedInPage() {\r\n        return <div className=\"Login\">\r\n            <div className=\"Title\">\r\n                Welcome!\r\n            </div>\r\n            <div className=\"login-content\">\r\n                Lorem ipsum dolor sit amet, consectetur adipiscing elit. Phasellus quis vestibulum quam. Interdum et malesuada fames ac ante ipsum primis in faucibus. Nullam efficitur id ligula a tempus. Sed consectetur libero eu ante semper condimentum. Sed tristique facilisis convallis. Duis a lacus orci. Quisque aliquam velit non ipsum iaculis, interdum venenatis felis gravida. Sed semper pellentesque orci a vestibulum.\r\n\r\n                Donec ipsum orci, condimentum id eleifend vestibulum, suscipit sed nibh. Aenean at ante id magna varius molestie et vel libero. Sed ultrices malesuada diam quis congue. Suspendisse id lectus ac dui consectetur finibus. Mauris sodales, neque non scelerisque feugiat, metus risus iaculis nibh, lobortis porta nibh enim ac nunc. Vestibulum mauris elit, convallis sed viverra vel, volutpat non metus. Vestibulum et semper tellus. Donec sodales scelerisque libero, at sollicitudin est congue id. Proin justo magna, tincidunt sit amet porttitor non, luctus vitae dui. Nunc eget lorem ut nisi tristique cursus.\r\n            </div>\r\n        </div>\r\n    }\r\n\r\n    render() {\r\n        if(this.state.loggedIn) {\r\n            return this.getLoggedInPage();\r\n        } else {\r\n            return this.getLoginPage();\r\n        }\r\n    }\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\nimport '../css/Main.css';\nimport Sidebar from './Sidebar';\nimport Home from './Home';\nimport Login from './Login';\n\nexport class Main extends React.Component {\n\n    state = {page: \"home\"};\n\n    onSelect = (page) => {\n        if(this.state.page !== page) {\n            this.setState({page: page})\n        }\n    };\n\n    getPage() {\n        if(this.state.page === \"login\") {\n            return <Login/>\n        } else {\n            return <Home/>\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"Main\">\n                <div className=\"Sidebar-container\">\n                    <Sidebar onSelectPage={this.onSelect}/>\n                </div>\n                <div className=\"Page\">\n                    {this.getPage()}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Main is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport Main from './javascript/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Main/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}